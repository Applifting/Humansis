apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.humansis.app.user"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode readVersionCode()
        versionName readVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file('keystore/release.keystore')
            keyAlias 'humansisReleaseKey'
            storePassword "humansis"
            keyPassword "humansis"
        }
        debug {
            storeFile file('keystore/debug.keystore')
            keyAlias 'humansisDebugKey'
            storePassword 'humansis'
            keyPassword 'humansis'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    flavorDimensions "environment"

    productFlavors {

        prod {
            dimension "environment"
            buildConfigField "String", "API_BASE_URL", "\"https://api.bmstaging.info/api/wsse/\""
            resValue "string", "app_name", "Humansis"
        }

        demo {
            dimension "environment"
            applicationIdSuffix ".demo"
            buildConfigField "String", "API_BASE_URL", "\"https://api-demo.humansis.org/api/wsse/\""
            resValue "string", "app_name", "Humansis DEMO"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // DI
    ext.dagger2_version = '2.23.2'
    implementation "com.google.dagger:dagger:$dagger2_version"
    kapt "com.google.dagger:dagger-compiler:$dagger2_version"

    // Database
    def room_version = "2.2.2"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "com.commonsware.cwac:saferoom.x:1.1.3"

    // ViewModels & Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:2.1.0"
    kapt "androidx.lifecycle:lifecycle-compiler:2.1.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.1.0"

    // Navigation
    def nav_version = "2.2.0-rc02"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.6.1"
    implementation "com.squareup.retrofit2:converter-gson:2.6.1"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.3'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0'

    // Bar code scanner
    implementation 'me.dm7.barcodescanner:zxing:1.9.13'

    // Worker
    implementation "androidx.work:work-runtime-ktx:2.2.0"


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def readVersionName() {
    def version = readVersion()
    return "${version["major"]}.${version["minor"]}.${version["patch"]}"
}

def readVersionCode() {
    def version = readVersion()
    def patch = version["patch"] as int
    def minor = version["minor"] as int
    def major = version["major"] as int
    return major * 1000000 + minor * 1000 + patch
}

def readVersion() {
    def versionFile = new File(project.rootDir, "version.properties")
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
    } finally {
        if (stream != null) stream.close()
    }

    // defaults
    if (!version["major"]) version["major"] = "1"
    if (!version["minor"]) version["minor"] = "0"
    if (!version["patch"]) version["patch"] = "0"
    return version
}